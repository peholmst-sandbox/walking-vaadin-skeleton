package org.vaadin.walkingskeleton.generator;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.Set;

final class PackageName {

    private static final Set<String> JAVA_KEYWORDS = Set.of(
            "abstract", "assert", "boolean", "break", "byte", "case", "catch", "char",
            "class", "const", "continue", "default", "do", "double", "else", "enum",
            "extends", "final", "finally", "float", "for", "goto", "if", "implements",
            "import", "instanceof", "int", "interface", "long", "native", "new",
            "package", "private", "protected", "public", "return", "short", "static",
            "strictfp", "super", "switch", "synchronized", "this", "throw", "throws",
            "transient", "try", "void", "volatile", "while"
    );

    private final String value;

    @JsonCreator
    public PackageName(String value) {
        if (!isValid(value)) {
            throw new IllegalArgumentException("Invalid package name");
        }
        this.value = value;
    }

    public static boolean isValid(String packageName) {
        // Validation generated by Claude

        if (packageName.isEmpty() || packageName.startsWith(".") || packageName.endsWith(".")) {
            return false;
        }

        String[] components = packageName.split("\\.");

        for (String component : components) {
            if (!isValidIdentifier(component)) {
                return false;
            }
        }

        return true;
    }

    private static boolean isValidIdentifier(String component) {
        if (component.isEmpty() || JAVA_KEYWORDS.contains(component) ||
                !Character.isJavaIdentifierStart(component.charAt(0))) {
            return false;
        }
        for (int i = 1; i < component.length(); i++) {
            if (!Character.isJavaIdentifierPart(component.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    @Override
    @JsonValue
    public String toString() {
        return value;
    }
}
