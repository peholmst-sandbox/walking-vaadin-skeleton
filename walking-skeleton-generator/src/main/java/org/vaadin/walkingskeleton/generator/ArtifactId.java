package org.vaadin.walkingskeleton.generator;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

final class ArtifactId {

    private final String value;

    @JsonCreator
    public ArtifactId(String value) {
        if (!isValid(value)) {
            throw new IllegalArgumentException("Invalid artifactId");
        }
        this.value = value;
    }

    public static boolean isValid(String artifactId) {
        // Validation generated by Claude

        if (artifactId.isEmpty() || artifactId.length() > 100) {
            return false;
        }

        // Must start with a letter
        if (!Character.isLetter(artifactId.charAt(0))) {
            return false;
        }

        // Check remaining characters
        for (int i = 1; i < artifactId.length(); i++) {
            char c = artifactId.charAt(i);
            if (!isValidArtifactIdCharacter(c)) {
                return false;
            }
        }

        // Check for consecutive special characters
        if (artifactId.contains("--") || artifactId.contains("..") ||
                artifactId.contains("__")) {
            return false;
        }

        // Check for leading or trailing special characters
        if (artifactId.startsWith("-") || artifactId.startsWith(".") ||
                artifactId.startsWith("_") ||
                artifactId.endsWith("-") || artifactId.endsWith(".") ||
                artifactId.endsWith("_")) {
            return false;
        }

        return true;
    }

    private static boolean isValidArtifactIdCharacter(char c) {
        return Character.isLetterOrDigit(c) || c == '-' || c == '.' || c == '_';
    }

    @Override
    @JsonValue
    public String toString() {
        return value;
    }
}
