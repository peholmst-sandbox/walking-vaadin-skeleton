package org.vaadin.walkingskeleton.generator;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

final class GroupId {

    private final String value;

    @JsonCreator
    public GroupId(String value) {
        if (!isValid(value)) {
            throw new IllegalArgumentException("Invalid groupId");
        }
        this.value = value;
    }

    public static boolean isValid(String groupId) {
        // Validation generated by Claude

        if (groupId.isEmpty() || groupId.startsWith(".") || groupId.endsWith(".") || groupId.contains("..")) {
            return false;
        }

        String[] components = groupId.split("\\.");

        // Check if there are at least two components (typical reverse domain convention)
        if (components.length < 2) {
            return false;
        }

        for (String component : components) {
            if (!isValidComponent(component)) {
                return false;
            }
        }

        return true;
    }

    private static boolean isValidComponent(String component) {
        if (component.isEmpty()) {
            return false;
        }

        // First character must be a letter
        if (!Character.isLetter(component.charAt(0))) {
            return false;
        }

        // Rest can be letters, digits, underscores, or dashes
        for (int i = 1; i < component.length(); i++) {
            char c = component.charAt(i);
            if (!Character.isLetterOrDigit(c) && c != '_' && c != '-') {
                return false;
            }
        }

        return true;
    }

    @Override
    @JsonValue
    public String toString() {
        return value;
    }
}
